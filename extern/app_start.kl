PROGRAM appstart
%COMMENT = 'appstart v1'
%NOLOCKGROUP
%NOPAUSE=ERROR+COMMAND+TPENABLE
%NOBUSYLAMP

VAR

	--debug_logPs: FILE
	response :FILE

	STATUS: INTEGER

	write_log: INTEGER
	--ps_count :INTEGER	
	prog_index: INTEGER
	str_task: STRING[127]

ROUTINE is_tsk_done (task_name:STRING): BOOLEAN FROM appstart
ROUTINE moveto( s_task :STRING ) FROM appstart

BEGIN	
	
	--ps_count = 1  -- reset
	
	IF UNINIT( str_task ) THEN str_task = '###@@@###'; ENDIF
		
	moveto(str_task)


--	write_log = 1 
		
--	CLEAR_SEMA (write_log) -- makes sure semaphore is zero before using it.

	--OPEN FILE debug_logPs('RW', 'CONS:')
	OPEN FILE response ('RW', 'RD:RESPONSE.HTM')	

	WRITE response ( '{"result":"success", "program":"', str_task ,'"}') 
	WRITE ( '{"result":"success",',CR,' "program":"', str_task ,'"}', CR)
  	--WRITE debug_logPs ('PS#1 starting #', ps_count, CR)

	CLOSE FILE response
	--CLOSE FILE debug_logPs
	
--	POST_SEMA (write_log) -- makes motion_ctrl available immediately

END appstart

ROUTINE moveto
VAR
	tsk_done :BOOLEAN
	motion_ctrl: INTEGER
BEGIN
	motion_ctrl = 1 -- Semaphore to allow motion control
		
	CLEAR_SEMA (motion_ctrl) -- makes sure semaphore is zero before using it.
	
	RUN_TASK( s_task, 1, FALSE, FALSE, 1 OR 2 OR 4, STATUS )
	
	--FORCE_SPMENU ( TP_PANEL, SPI_TPUSER, 1) -- Force the Teach Pendant
											-- user screen to be seen
								
	REPEAT
		tsk_done = is_tsk_done ( s_task )
		DELAY (2000)
	UNTIL ( tsk_done )
	
	POST_SEMA (motion_ctrl) -- makes motion_ctrl available immediately
END moveto

--ROUTINE w_result
--VAR
--	write_lock :INTEGER
--BEGIN
	
--	
--	write_lock = 1
--	CLEAR_SEMA (write_lock) -- makes sure semaphore is zero before using it.
--	POST_SEMA (write_lock) -- makes motion_ctrl available immediately
--END w_result

ROUTINE is_tsk_done
VAR
STATUS : INTEGER -- The status of the operation of GET_TSK_INFO
task_no : INTEGER -- Receives the current task number for task_name
attr_out: INTEGER -- Receives the TSK_STATUS output
dummy : STRING[2] -- Does not receive any information
BEGIN
	
	GET_TSK_INFO (task_name, task_no, TSK_STATUS, attr_out, dummy, STATUS)
	IF (attr_out = PG_ABORTED) THEN
		RETURN (TRUE) -- If task is aborted then return TRUE
	ENDIF
	RETURN(FALSE) -- otherwise task is not aborted and return

END is_tsk_done